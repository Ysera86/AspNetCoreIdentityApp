Https tikli açtýk mvp projesini cookie vs kullanýcaz Identtyde.



IdentityDbContext ten miras alýcaz. Ondan gelen entityler.

Önemli olan entityler : bulara direk müdahale edebiliyoruz diðerlerine fazladan biþeye gerek olmaz.

IdentityUser
IdentityRole

bu entitylerde Normalized.. alanlar var, amaç indexleme en çok aranan alanlar için : username, email. bu normalized.. sütunlar indexlenmiþ alanlar ve arama ypýnca bunlara göre arama yapýlýr. non clustered index. /1 tabloda 1 tane clustered index olur o da pk) tabloda yavaþlama varsa : indexleme Ideneity methodlarýnda bu alanlardan çalýþan arama methodlarý halihazýrda var onlarý kullanýcaz.


public class AppDbContext : IdentityDbContext<AppUser, AppRole, string> // random guid deðerler üretecek
string için user ve role tablolarýnda primary key tipi alaný : int vs sayýsal deðer mantýklý deðil hep Guid vermek best practice : IdentityApý random Guid deðerler üretecek

(migration iliþkisel dblerde.. no sql dbler igration kullanmaz çnk zaten þemalarý yok, nosql.tablo= collection, nosql.satýr=döküman)
migration  yaptýðýmýz an Identity tablolarý oluþacak.  

add-migration initial
update-database


claimler: kullanýcý hakkýnda bilgiler. key-value
örn: City alaný üzerinden yetkilendirme yapmak istersek
kimlik yetkilendirme yaptýðýmýz bir veri varsa o zaman claimde tutarýz , user tablosunda deðil.  Cookie içinde claimler yer aldýðý için. Claim bazlý yetkilendirme!
RoleClaims : manager_read, manager_write vs olabilir. 
role,claim,policy bazlý yetkilendirmeler  cookie içine yazýlýr.

AspNetUserLogins > fbden girdi, google dan girdi vs. cookie içinden  gelecek bu bilgi. müdahale etmeyiz genelde.
AspNetUserToken > fbden gelen tooken vs. access ve refresh tokenlarý tutabiliriz.

---

Home. SignUp endpointi ve onun viewýný ekledik. Bunun için SignUpViewModel ekledik ve bunu @model olarak vewde kullandýk. using oraya eklememk için de Views._ViewImports.cshtml içine 1 kere ekledik.

viewlarda elementlerde asp-for="UserName" > labellarýn içleri boþ içn modeldeki DisplayNameden geliyor, diðerleri (input vs) için hem tip, hem Id hem name alanlarýný belirler

---

best practice asenkron yazmaktýr
ancak asenkron programlama gücünü/hýzýný server yoðunken gösterir, threadleri bloklamadan çalýþtýðý için. onun dýþýnda fark göremeyiz çalýþmalarýnda

UserManager<AppUser> : kullanýcý ile ilgili iþlemleri yapmak için kullanacaðýmýz sýnýf
RoleManager<AppRole> :
SignInManager : cookie oluþturma 3rdparty implement

await : await : bana þimdi dön demek. ama threadi bloklamaz, thread burda beklemez. gidip baka iþler yapar sadee gözü kulaðý bu threadden dönecek cevaptadýr. Ama senkron olsaydý ve iþlem 10dk sürseydi program 10dk bu satýrda beklicekti.


-- encrypt edilen decrypt edilebilir ama hashlenen geri alýnamaz. kontrl ederken de girilen þifreyi hashleyip dbdeki hashlenmiþ hali ile karþýlaþtýrýcaz.